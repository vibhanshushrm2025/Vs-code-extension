{"version":3,"file":"extension.js","mappings":"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","sources":["webpack://LQD3/./src/HelloWorldPanel.ts","webpack://LQD3/./src/SidebarProvider.ts","webpack://LQD3/./src/getNonce.ts","webpack://LQD3/external commonjs \"vscode\"","webpack://LQD3/webpack/bootstrap","webpack://LQD3/./src/extension.ts"],"sourcesContent":["import * as vscode from \"vscode\";\r\nimport { getNonce } from \"./getNonce\";\r\n\r\n\r\nexport class HelloWorldPanel {\r\n  /**\r\n   * Track the currently panel. Only allow a single panel to exist at a time.\r\n   */\r\n  public static currentPanel: HelloWorldPanel | undefined;\r\n\r\n  public static readonly viewType = \"hello-world\";\r\n\r\n  private readonly _panel: vscode.WebviewPanel;\r\n  private readonly _extensionUri: vscode.Uri;\r\n  private _disposables: vscode.Disposable[] = [];\r\n\r\n  public static createOrShow(extensionUri: vscode.Uri) {\r\n    const column = vscode.window.activeTextEditor\r\n      ? vscode.window.activeTextEditor.viewColumn\r\n      : undefined;\r\n\r\n    // If we already have a panel, show it.\r\n    if (HelloWorldPanel.currentPanel) {\r\n      HelloWorldPanel.currentPanel._panel.reveal(column);\r\n      HelloWorldPanel.currentPanel._update();\r\n      return;\r\n    }\r\n\r\n    // Otherwise, create a new panel.\r\n    const panel = vscode.window.createWebviewPanel(\r\n      HelloWorldPanel.viewType,\r\n      \"HelloWorld\",\r\n      column || vscode.ViewColumn.One,\r\n      {\r\n        // Enable javascript in the webview\r\n        enableScripts: true,\r\n\r\n        // And restrict the webview to only loading content from our extension's `media` directory.\r\n        localResourceRoots: [\r\n          vscode.Uri.joinPath(extensionUri, \"media\"),\r\n          vscode.Uri.joinPath(extensionUri, \"out/compiled\"),\r\n        ],\r\n      }\r\n    );\r\n\r\n    HelloWorldPanel.currentPanel = new HelloWorldPanel(panel, extensionUri);\r\n  }\r\n\r\n  public static kill() {\r\n    HelloWorldPanel.currentPanel?.dispose();\r\n    HelloWorldPanel.currentPanel = undefined;\r\n  }\r\n\r\n  public static revive(panel: vscode.WebviewPanel, extensionUri: vscode.Uri) {\r\n    HelloWorldPanel.currentPanel = new HelloWorldPanel(panel, extensionUri);\r\n  }\r\n\r\n  private constructor(panel: vscode.WebviewPanel, extensionUri: vscode.Uri) {\r\n    this._panel = panel;\r\n    this._extensionUri = extensionUri;\r\n\r\n    // Set the webview's initial html content\r\n    this._update();\r\n\r\n    // Listen for when the panel is disposed\r\n    // This happens when the user closes the panel or when the panel is closed programatically\r\n    this._panel.onDidDispose(() => this.dispose(), null, this._disposables);\r\n\r\n    // // Handle messages from the webview\r\n    // this._panel.webview.onDidReceiveMessage(\r\n    //   (message) => {\r\n    //     switch (message.command) {\r\n    //       case \"alert\":\r\n    //         vscode.window.showErrorMessage(message.text);\r\n    //         return;\r\n    //     }\r\n    //   },\r\n    //   null,\r\n    //   this._disposables\r\n    // );\r\n  }\r\n\r\n  public dispose() {\r\n    HelloWorldPanel.currentPanel = undefined;\r\n\r\n    // Clean up our resources\r\n    this._panel.dispose();\r\n\r\n    while (this._disposables.length) {\r\n      const x = this._disposables.pop();\r\n      if (x) {\r\n        x.dispose();\r\n      }\r\n    }\r\n  }\r\n\r\n  private async _update() {\r\n    const webview = this._panel.webview;\r\n\r\n    this._panel.webview.html = this._getHtmlForWebview(webview);\r\n    webview.onDidReceiveMessage(async (data) => {\r\n      switch (data.type) {\r\n        case \"onInfo\": {\r\n          if (!data.value) {\r\n            return;\r\n          }\r\n          vscode.window.showInformationMessage(data.value);\r\n          break;\r\n        }\r\n        case \"onError\": {\r\n          if (!data.value) {\r\n            return;\r\n          }\r\n          vscode.window.showErrorMessage(data.value);\r\n          break;\r\n        }\r\n        // case \"tokens\": {\r\n        //   await Util.globalState.update(accessTokenKey, data.accessToken);\r\n        //   await Util.globalState.update(refreshTokenKey, data.refreshToken);\r\n        //   break;\r\n        // }\r\n      }\r\n    });\r\n  }\r\n\r\n  private _getHtmlForWebview(webview: vscode.Webview) {\r\n    // // And the uri we use to load this script in the webview\r\n    const scriptUri = webview.asWebviewUri(\r\n      vscode.Uri.joinPath(this._extensionUri, \"out/compiled\", \"HelloWorld.js\")\r\n    );\r\n\r\n    // Local path to css styles\r\n    // const styleResetPath = \r\n    // const stylesPathMainPath = \r\n\r\n    // Uri to load styles into webview\r\n    const stylesResetUri = webview.asWebviewUri(vscode.Uri.joinPath(\r\n        this._extensionUri,\r\n        \"media\",\r\n        \"reset.css\"\r\n      ));\r\n    const stylesMainUri = webview.asWebviewUri(vscode.Uri.joinPath(\r\n        this._extensionUri,\r\n        \"media\",\r\n        \"vscode.css\"\r\n      ));\r\n    // const cssUri = webview.asWebviewUri(\r\n    //   vscode.Uri.joinPath(this._extensionUri, \"media\", \"main.js\")\r\n    // );\r\n\r\n    // // Use a nonce to only allow specific scripts to be run\r\n    const nonce = getNonce();\r\n\r\n    return `<!DOCTYPE html>\r\n\t\t\t<html lang=\"en\">\r\n\t\t\t<head>\r\n\t\t\t\t<meta charset=\"UTF-8\">\r\n\t\t\t\t<!--\r\n\t\t\t\t\tUse a content security policy to only allow loading images from https or from our extension directory,\r\n\t\t\t\t\tand only allow scripts that have a specific nonce.\r\n        -->\r\n        <meta http-equiv=\"Content-Security-Policy\" content=\"img-src https: data:; style-src 'unsafe-inline' ${\r\n      webview.cspSource\r\n    };\">\r\n\t\t\t\t<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n\t\t\t\t<link href=\"${stylesResetUri}\" rel=\"stylesheet\">\r\n        <link href=\"${stylesMainUri}\" rel=\"stylesheet\">        \r\n        \r\n        </script>\r\n\t\t\t</head>\r\n      <body>\r\n\r\n      </body>\r\n      <script src=\"${scriptUri}\" nonce=\"${nonce}\"></script>\r\n\t\t\t</html>`;\r\n  }\r\n}","import * as vscode from \"vscode\";\r\nimport { getNonce } from \"./getNonce\";\r\n\r\nexport class SidebarProvider implements vscode.WebviewViewProvider {\r\n  _view?: vscode.WebviewView;\r\n  _doc?: vscode.TextDocument;\r\n\r\n  constructor(private readonly _extensionUri: vscode.Uri) {}\r\n\r\n  public resolveWebviewView(webviewView: vscode.WebviewView) {\r\n    this._view = webviewView;\r\n\r\n    webviewView.webview.options = {\r\n      // Allow scripts in the webview\r\n      enableScripts: true,\r\n\r\n      localResourceRoots: [this._extensionUri],\r\n    };\r\n\r\n    webviewView.webview.html = this._getHtmlForWebview(webviewView.webview);\r\n\r\n    webviewView.webview.onDidReceiveMessage(async (data) => {\r\n      switch (data.type) {\r\n        case \"onInfo\": {\r\n          if (!data.value) {\r\n            return;\r\n          }\r\n          vscode.window.showInformationMessage(data.value);\r\n          break;\r\n        }\r\n        case \"onError\": {\r\n          if (!data.value) {\r\n            return;\r\n          }\r\n          vscode.window.showErrorMessage(data.value);\r\n          break;\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  public revive(panel: vscode.WebviewView) {\r\n    this._view = panel;\r\n  }\r\n\r\n  private _getHtmlForWebview(webview: vscode.Webview) {\r\n    const styleResetUri = webview.asWebviewUri(\r\n      vscode.Uri.joinPath(this._extensionUri, \"media\", \"reset.css\")\r\n    );\r\n    const styleVSCodeUri = webview.asWebviewUri(\r\n      vscode.Uri.joinPath(this._extensionUri, \"media\", \"vscode.css\")\r\n    );\r\n    const scriptUri = webview.asWebviewUri(\r\n      vscode.Uri.joinPath(this._extensionUri, \"out\", \"compiled/sidebar.js\")\r\n    );\r\n    const styleMainUri = webview.asWebviewUri(\r\n      vscode.Uri.joinPath(this._extensionUri, \"out\", \"compiled/sidebar.css\")\r\n    );\r\n    const gggg =\r\n    \"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.7/MathJax.js?config=TeX-AMS-MML_HTMLorMML&delayStartupUntil=configured\";\r\n\r\n    // Use a nonce to only allow a specific script to be run.\r\n    const nonce = getNonce();\r\n\r\n    return `<!DOCTYPE html>\r\n\t\t\t<html lang=\"en\">\r\n\t\t\t<head>\r\n\t\t\t\t<meta charset=\"UTF-8\">\r\n\t\t\t\t<!--\r\n\t\t\t\t\tUse a content security policy to only allow loading images from https or from our extension directory,\r\n\t\t\t\t\tand only allow scripts that have a specific nonce.\r\n        -->\r\n        \r\n\t\t\t\t<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n        <script type=\"text/javascript\"\r\n\t\tsrc=${gggg}>\r\n\t\t</script>\r\n\t\t\t\t<link href=\"${styleResetUri}\" rel=\"stylesheet\">\r\n\t\t\t\t<link href=\"${styleVSCodeUri}\" rel=\"stylesheet\">\r\n        <link href=\"${styleMainUri}\" rel=\"stylesheet\">\r\n        <script nonce=\"${nonce}\">\r\n          const tsvscode = acquireVsCodeApi();\r\n        </script>\r\n\t\t\t</head>\r\n      <body>\r\n\t\t\t\t<script nonce=\"${nonce}\" src=\"${scriptUri}\"></script>\r\n\t\t\t</body>\r\n\t\t\t</html>`;\r\n  }\r\n}\r\n","export function getNonce() {\r\n\tlet text = '';\r\n\tconst possible = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\r\n\tfor (let i = 0; i < 32; i++) {\r\n\t\ttext += possible.charAt(Math.floor(Math.random() * possible.length));\r\n\t}\r\n\treturn text;\r\n}","module.exports = require(\"vscode\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// The module 'vscode' contains the VS Code extensibility API\n// Import the module and reference it with the alias vscode in your code below\nimport * as vscode from 'vscode';\nimport { HelloWorldPanel } from './HelloWorldPanel';\nimport { SidebarProvider } from './SidebarProvider';\n\n\nexport function activate(context: vscode.ExtensionContext) {\n\n\n\tconst sidebarProvider = new SidebarProvider(context.extensionUri);\n\tcontext.subscriptions.push(\n\t\tvscode.window.registerWebviewViewProvider(\n\t\t\t\"LiveQD-sidebar\",\n\t\t\tsidebarProvider\n\t\t)\n\t);\n\tcontext.subscriptions.push(\n\t\tvscode.commands.registerCommand(\"LQD.RefreshWebviews\",()=>{\n\t\t\tHelloWorldPanel.kill();\n\t\t\tHelloWorldPanel.createOrShow(context.extensionUri);\n\t\t\tsetTimeout(()=>{\n\t\t\t\tvscode.commands.executeCommand(\n\t\t\t\t\t\"workbench.action.webview.openDeveloperTools\"\n\t\t\t\t);\n\t\t\t},500);\n\t\t})\n\t);\n\tcontext.subscriptions.push(vscode.commands.registerCommand('LQD.helloWorld', () => {\n\t\tHelloWorldPanel.createOrShow(context.extensionUri);\n\t})\n\t);\n}\n\nexport function deactivate() { }\n"],"names":["HelloWorldPanel","panel","extensionUri","_disposables","this","_panel","_extensionUri","_update","onDidDispose","dispose","static","column","vscode","window","activeTextEditor","viewColumn","undefined","currentPanel","reveal","createWebviewPanel","viewType","ViewColumn","One","enableScripts","localResourceRoots","Uri","joinPath","length","x","pop","async","webview","html","_getHtmlForWebview","onDidReceiveMessage","data","type","value","showInformationMessage","showErrorMessage","scriptUri","asWebviewUri","stylesResetUri","stylesMainUri","nonce","getNonce","cspSource","constructor","resolveWebviewView","webviewView","_view","options","revive","styleResetUri","styleVSCodeUri","styleMainUri","text","possible","i","charAt","Math","floor","random","module","exports","require","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","context","sidebarProvider","SidebarProvider","subscriptions","push","registerWebviewViewProvider","commands","registerCommand","kill","createOrShow","setTimeout","executeCommand"],"sourceRoot":""}